"use strict";(self.webpackChunkautheo=self.webpackChunkautheo||[]).push([[3205],{4490:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var t=o(4848),s=o(8453);const i={sidebar_position:2},r="Autheo Node Setup",d={id:"operators/validator-node",title:"Autheo Node Setup",description:"The following document outlines the steps necessary to setup your Autheo validator node. You will need Ubuntu 22.04 for this process.",source:"@site/docs/operators/validator-node.md",sourceDirName:"operators",slug:"/operators/validator-node",permalink:"/autheo/docs/operators/validator-node",draft:!1,unlisted:!1,editUrl:"https://github.com/acstone-mts/autheo/docs/operators/validator-node.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started with Evmos CLI",permalink:"/autheo/docs/operators/evmos-cli"}},c={},a=[{value:"Cloning Node Software",id:"cloning-node-software",level:2},{value:"Adjust <code>authd</code> and <code>rpc.sh</code> Files",id:"adjust-authd-and-rpcsh-files",level:2},{value:"Swap Out the Genesis.json File",id:"swap-out-the-genesisjson-file",level:2},{value:"Creating the Service File",id:"creating-the-service-file",level:2},{value:"Running the Node Software",id:"running-the-node-software",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"autheo-node-setup",children:"Autheo Node Setup"})}),"\n",(0,t.jsxs)(n.p,{children:["The following document outlines the steps necessary to setup your Autheo validator node. You will need ",(0,t.jsx)(n.strong,{children:"Ubuntu 22.04"})," for this process."]}),"\n",(0,t.jsx)(n.h2,{id:"cloning-node-software",children:"Cloning Node Software"}),"\n",(0,t.jsx)(n.p,{children:"You can either download the node software binary from Github directly or use the following CLI command to clone the repository locally:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\ngit clone <Repo Location TBD on deployment>\n\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"adjust-authd-and-rpcsh-files",children:["Adjust ",(0,t.jsx)(n.code,{children:"authd"})," and ",(0,t.jsx)(n.code,{children:"rpc.sh"})," Files"]}),"\n",(0,t.jsxs)(n.p,{children:["You will need to move the ",(0,t.jsx)(n.code,{children:"authd"})," binary located in ",(0,t.jsx)(n.strong,{children:"user/local/bin"})]}),"\n",(0,t.jsxs)(n.p,{children:["In the cloned node repo, you will find the file ",(0,t.jsx)(n.code,{children:"rpc.sh"}),". You will need to update the ",(0,t.jsx)(n.code,{children:"NODE_NUMBER"})," variable to the current number of nodes, plus one. Therefore, if there are currently 4 nodes, your ",(0,t.jsx)(n.code,{children:"NODE_NUMBER"})," should be ",(0,t.jsx)(n.code,{children:"5"}),". Verify that the contents appear as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\n*********************************************\n#!/bin/bash\n\nLOGLEVEL="debug"\nNODE_NUMBER=3\nCONST_NODE_NAME="auth-rpc-node"\nCHAINID="auth_ChainID-1"\n\n# Set the script directory\nSCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )\nHOMEDIR="${SCRIPT_DIR}/${CONST_NODE_NAME}${NODE_NUMBER}"\n\n# Function to set up the Ethereum node\nfunction setupNode() {\n  mkdir -p "${HOMEDIR}/config"\n\n  # Initialize the node\n  authd config keyring-backend "file" --home "$HOMEDIR"\n  authd config chain-id "$CHAINID" --home "$HOMEDIR"\n  authd config node "tcp://${CONST_NODE_NAME}${NODE_NUMBER}:26657" --home "$HOMEDIR"\n  authd init "${CONST_NODE_NAME}${NODE_NUMBER}" -o --chain-id "$CHAINID" --home "$HOMEDIR"\n}\n\n# Function to update application configuration\nfunction updateAppConfig() {\n  sed -i \'/minimum-gas-prices =/c\\minimum-gas-prices = "0.0001mol"\' "$HOMEDIR/config/app.toml"\n  sed -i \'/address = "0.0.0.0:8545"/c\\address = "0.0.0.0:8545"\' "$HOMEDIR/config/app.toml"\n  sed -i \'/ws-address = "127.0.0.1:8546"/c\\ws-address = "0.0.0.0:8546"\' "$HOMEDIR/config/app.toml"\n  sed -i \'/api = "eth,net,web3"/c\\api = "eth,txpool,personal,net,debug,web3"\' "$HOMEDIR/config/app.toml"\n}\n\n# Main execution\nset -o xtrace\nsetupNode\ncopyGenesis\nupdateAppConfig\n\n*****************************************\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"swap-out-the-genesisjson-file",children:"Swap Out the Genesis.json File"}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"/$HOMEDIR/config/"})," directory, you will find a ",(0,t.jsx)(n.code,{children:"genesis.json"})," file. Replace the existing ",(0,t.jsx)(n.code,{children:"genesis.json"})," file with the new version found in your cloned node repo."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-the-service-file",children:"Creating the Service File"}),"\n",(0,t.jsxs)(n.p,{children:["Using your IDE of choice, create a new ",(0,t.jsx)(n.code,{children:"authd.service"})," file using the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\nsudo vim /etc/systemd/system/authd.service\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Your ",(0,t.jsx)(n.code,{children:"authd.service"})," file should contain the following code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\n[Unit]\nDescription=Auth Daemon\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/bin/sh -c 'echo \"Z3xV7aDp\" | authd start --json-rpc.api=eth,txpool,personal,net,debug,web3 --api.enable --home YOUR_HOME-DIR' \nWorkingDirectory=/home/<USER>\nUser=<USERNAME>\nGroup=<GROUP>\n\n[Install]\nWantedBy=multi-user.target\n\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"You must replace the following variables within this file:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"USER"})," - The name of your node's working directory."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"USERNAME"})," - Your username for node access."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"GROUP"})," - The name of your node group."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"running-the-node-software",children:"Running the Node Software"}),"\n",(0,t.jsx)(n.p,{children:"After completing the above configuration, you can run the node software with the following commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\nsudo systemctl enable authd.service\nsudo systemctl start authd.service \n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);